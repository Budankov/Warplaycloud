.hero {
  margin-bottom: 150px;
}
.container {
}
.container-hero {
  position: relative;
  min-width: 1327px;
  margin-left: auto;
  margin-right: auto;
}
.hero-container {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 12;
  display: flex;
  flex-direction: column;
  align-items: center;
}
.hero-subtitle {
  font-family: var(--roboto);
  font-style: normal;
  font-weight: 500;
  font-size: 16px;
  line-height: 1.187;
  color: var(--primary-text-colors);
}
.hero-title {
  font-family: 'Aire Exterior';
  font-style: normal;
  font-weight: 400;
  font-size: 48px;
  line-height: 1;
  color: var(--primary-text-colors);
  text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  margin-bottom: 97px;
}
.cyberpunk {
}

/* ======================== */

.card {
  color: #fff;
  text-align: center;
  // background-color: #fcf7f7;
  border-radius: 15px; /*Rounds the corners a little.*/
  position: relative; /*Position of relative because we will use position of absolute on the pseudo-element. This will make it so that the pseudo-element will not float away from the card.*/
}
/*Creating the gradient border with a pseudo-element. */
.card::before {
  content: ''; /*Set the content property to an empty string, if you don't set a content the element won't show.*/
  position: absolute; /*Allows for this element to be freely moved within the parent box that has relative position.*/
  top: 0;
  left: 0;
  width: calc(100% + -21px);
  height: calc(100% + 8px);
  transform: translate(11px, -4px);
  background: linear-gradient(60deg, #5ff281, #5f86f2, #a65ff2, #f25fd0, #f25f61, #f2cb5f) 0 50%; /*You can use a gradient of your choosing. I generated this one online.*/
  background-size: 300% 300%; /*Setting the background size to a large number since we will be animating the background position via keyframes.*/
  animation: gradient-animation 2.5s alternate infinite; /*Applying the keyframe animation.*/
  border-radius: 15px; /*Rounds the corners a little.*/
  z-index: -1; /*Sends the the gradient background to the back of the card.*/
  -webkit-box-shadow: 0px 9px 40px 20px rgba(33, 138, 171, 0.7);
  box-shadow: 0px 9px 40px 20px rgba(33, 138, 171, 0.7);
}
@keyframes gradient-animation {
  50% {
    background-position: 100% 50%;
  }
}
/* ======================== */

.slides {
  position: relative;
  background: #000;
  height: 680px;
  overflow: hidden;
  margin-left: auto;
  margin-right: auto;
  border-radius: 15px;
}

.slides::after {
  content: '';
  position: absolute;
  inset: 0;
  z-index: 10;
  background-color: rgb(0 0 0 / 25%);
}

.slide {
  position: absolute;
  inset: 0;
  opacity: 0;
  animation: cycle 16s infinite;
}

.slide-2 {
  animation-delay: 4s;
}

.slide-3 {
  animation-delay: 8s;
}

.slide-4 {
  animation-delay: 12s;
}

.slide-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

@keyframes cycle {
  0% {
    opacity: 0;
  }

  10% {
    opacity: 1;
  }

  20% {
    opacity: 1;
    transform: scale(1.05);
  }

  30% {
    opacity: 0;
    transform: scale(1.05);
  }

  100% {
    opacity: 0;
  }
}

/* ======================== */

.mouse {
  position: absolute;
  right: 50%;
  bottom: 10%;
  width: 25px;
  height: 50px;
  border: 2px solid #fff;
  border-radius: 20px;
  display: flex;
  z-index: 13;
  /*This is used here for aligning the mouse wheel in the middle of the mouse container. We could use align items and justify content center here,
    but in this situation it's easier to do a margin of auto on the mouse wheel itself and it will do the same thing with one less line of css.*/
}

.mouse-wheel {
  display: block;
  width: 10px;
  height: 10px;
  background-color: #fff;
  border-radius: 50%;
  margin: auto;
  /*Centers the mouse wheel vertically and horizontally (because of help from display: flex on the mouse).*/
  animation: move-wheel 1s linear infinite;
}

/* Here at the start of the animation the mouse wheel will have an opacity of 0 and it will be moved up. At the end the opacity is 1 and it is moved down */
@keyframes move-wheel {
  0% {
    opacity: 0;
    transform: translateY(-1rem);
  }

  100% {
    opacity: 1;
    transform: translateY(1rem);
  }
}
